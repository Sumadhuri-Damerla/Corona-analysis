library(highcharter)
library(janitor)
data(worldgeojson, package = "highcharter")
world_bycountry$country[world_bycountry$country  == "US"] <- "United States of America"
world_bycountry %>%
janitor::clean_names() %>%
filter(confirmed > 0) -> countries
highchart() %>%
hc_add_series_map(worldgeojson, countries, value = 'active', joinBy = c('name','country'))  %>%
hc_colorAxis(minColor = "#FF0000", maxColor = "#8B0000") %>%
hc_title(text = "Countries exposed to nCov-19") %>%
hc_subtitle(text = 'Total Active Cases')
data(worldgeojson, package = "highcharter")
world_bycountry$country[world_bycountry$country  == "US"] <- "United States of America"
world_bycountry %>%
janitor::clean_names() %>%
filter(confirmed > 0) -> countries
highchart() %>%
hc_add_series_map(worldgeojson, countries, value = 'active', joinBy = c('name','country'))  %>%
hc_colorAxis(minColor = "#FF0000", maxColor = "#8B0000") %>%
hc_title(text = "Countries exposed to nCov-19") %>%
hc_subtitle(text = 'Total Active Cases')
View(us_bystate)
#getting the world json data from the highcharter package
data(worldgeojson, package = "highcharter")
#renaming US to match the highcharter data
world_bycountry$country[world_bycountry$country  == "US"] <- "United States of America"
#filtering the data to contain active cases
world_bycountry %>%
janitor::clean_names() %>%
filter(active > 0) -> countries
highchart() %>%
hc_add_series_map(worldgeojson, countries, value = 'active', joinBy = c('name','country'))  %>%
hc_colorAxis(minColor = "#FF0000", maxColor = "#8B0000") %>%
hc_title(text = "Countries exposed to nCov-19") %>%
hc_subtitle(text = 'Total Active Cases')
#getting the world json data from the highcharter package
data(worldgeojson, package = "highcharter")
#renaming US to match the highcharter data
world_bycountry$country[world_bycountry$country  == "US"] <- "United States of America"
#filtering the data to contain active cases
world_bycountry %>%
janitor::clean_names() %>%
filter(active > 0) -> countries
#Plotting a map to show active cases across countries
highchart() %>%
hc_add_series_map(worldgeojson, countries, value = 'active', joinBy = c('name','country'))  %>%
hc_colorAxis(minColor = "#ffcccb", maxColor = "#8B0000") %>%
hc_title(text = "Countries exposed to nCov-19") %>%
hc_subtitle(text = 'Total Active Cases')
#getting the world json data from the highcharter package
data(worldgeojson, package = "highcharter")
#renaming US to match the highcharter data
world_bycountry$country[world_bycountry$country  == "US"] <- "United States of America"
#filtering the data to contain active cases
world_bycountry %>%
janitor::clean_names() %>%
filter(active > 0) -> countries
#Plotting a map to show active cases across countries
highchart() %>%
hc_add_series_map(worldgeojson, countries, value = 'active', joinBy = c('name','country'))  %>%
hc_colorAxis(minColor = "#ff0000", maxColor = "#000000") %>% #brighter red means more number of active cases
hc_title(text = "Countries exposed to nCov-19") %>%
hc_subtitle(text = 'Total Active Cases')
#creating a corona map
corona_map <- world_bycountry %>%
select(country, confirmed, deaths,recovered) %>%
rename(region = country)   # Rename columns
#merge map and corona data
world_map <- map_data("world") #creating a map of the world dataset
corona_map <- left_join(corona_map, world_map, by = "region") #Left joining the dataset based on region i.e. country
# ggplot plot of confirmed cases across the world
corona_map %>%
ggplot(aes(long, lat, group = group)) +
geom_polygon(aes(fill = confirmed), color = "white") +
labs(title = "Confirmed cases across the world",
caption = "Source: corona dataset retrieved till March 22")
View(world_bycountry)
world_bycountry %>%
head(10) %>%
pivotData()%>% #function call to make the dataset long and create Type column
ggplot(mapping = aes(x = date, y = count/1000, color = type)) +
geom_point()+
geom_line() +
labs(title = "Trend of cases in top 10 countries",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths, color = country)) +
geom_point()+
geom_line() +
labs(title = "Trend of cases in top 10 countries",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths, color = country)) +
geom_point()+
geom_bar() +
labs(title = "Trend of cases in top 10 countries",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths, color = country)) +
geom_bar(width = .5, alpha = 0.7, na.rm = TRUE) +
labs(title = "Trend of cases in top 10 countries",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, color = country)) +
geom_bar(width = .5, alpha = 0.7, na.rm = TRUE) +
labs(title = "Trend of cases in top 10 countries",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths, group = country)) +
geom_line(aes(color = country, lineType = country)) +
labs(title = "Trend of cases in top 10 countries",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths)) +
geom_line(aes(color = country, lineType = country)) +
labs(title = "Trend of cases in top 10 countries",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths)) +
geom_point(aes(color = country, lineType = country)) +
labs(title = "Trend of cases in top 10 countries",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths)) +
geom_point(aes(color = country, lineType = country)) +
geom_text(size = 2,position=position_dodge(width = 1),vjust = -0.3,aes(label = round(perc_category,2)))
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths)) +
geom_point(aes(color = country, lineType = country)) +
labs(title = "Trend of cases in top 10 countries",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
plot(confirmed, deaths)
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths)) +
geom_point(aes(color = country, lineType = country)) +
labs(title = "Trend of cases in top 10 countries",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths)) +
geom_point(aes(color = country, lineType = country)) +
geom_smooth() +
labs(title = "Trend of cases in top 10 countries",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths)) +
geom_point(aes(color = country, lineType = country)) +
geom_smooth() +
labs(title = "Trend of cases in top 10 countries",
subtitle = "Confirmed vs Deaths"
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths)) +
geom_point(aes(color = country, lineType = country)) +
geom_smooth() +
labs(title = "Trend of cases in top 10 countries",
subtitle = "Confirmed vs Deaths",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths)) +
geom_point(aes(color = country, lineType = country)) +
stat_smooth() +
labs(title = "Trend of cases in top 10 countries",
subtitle = "Confirmed vs Deaths",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths)) +
geom_point(aes(color = country, size = country)) +
stat_smooth() +
labs(title = "Trend of cases in top 10 countries",
subtitle = "Confirmed vs Deaths",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths)) +
geom_point(aes(color = country, size = country)) +
geom_smooth() +
labs(title = "Trend of cases in top 10 countries",
subtitle = "Confirmed vs Deaths",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths, label = country)) +
geom_point(aes(color = country, size = country)) +
geom_text(aes(label=ifelse(deaths>2500,as.character(country),'')),hjust=0,vjust=0) +
geom_smooth() +
labs(title = "Trend of cases in top 10 countries",
subtitle = "Confirmed vs Deaths",
caption = "Source:Corona dataset retrieved till March 22")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths, label = country)) +
geom_point(aes(color = country, size = country)) +
geom_text(aes(label=ifelse(deaths>500,as.character(country),'')),hjust=0,vjust=0) +
geom_smooth() +
labs(title = "Trend of cases in top 10 countries",
subtitle = "Confirmed vs Deaths",
caption = "Source:Corona dataset retrieved till March 22")
View(world_notchina)
View(us_bydate)
View(us_bycountry)
View(us_bystate)
world_spread <- corona %>%
filter(confirmed!=0) %>%
#grouping the rows by date
group_by(date,country) %>%
#computing total confirmed, deaths and recovered cases count for the world
summarise(confirmed = sum(confirmed),
deaths = sum(deaths),
recovered = sum(recovered)) %>%
arrange(date)
## first 12 records
world_spread %>%
head(12) %>%
printTable(caption = "Table 6.1: First 12 countries exposed to ncov-19",col = 5)
## last 12 records
world_spread %>%
tail(12) %>%
printTable(caption = "Table 6.2: 12 Recent countries exposed to ncov-19", col = 5)
View(world_spread)
world_spread <- corona %>%
filter(confirmed!=0) %>%
#grouping the rows by date
group_by(date,country) %>%
#computing total confirmed, deaths and recovered cases count for the world
summarise(confirmed = sum(confirmed),
deaths = sum(deaths),
recovered = sum(recovered)) %>%
arrange(date)
## first 12 records
world_spread %>%
head(12) %>%
printTable(caption = "Table 6.1: First 12 countries exposed to ncov-19",col = 5)
## last 12 records
world_spread %>%
tail(12) %>%
printTable(caption = "Table 6.2: 12 Recent countries exposed to ncov-19", col = 5)
world_spread <- corona %>%
filter(confirmed!=0) %>%
#grouping the rows by date
group_by(date,country) %>%
unique(country) %>%
#computing total confirmed, deaths and recovered cases count for the world
summarise(confirmed = sum(confirmed),
deaths = sum(deaths),
recovered = sum(recovered)) %>%
arrange(date)
world_spread <- corona %>%
filter(confirmed!=0) %>%
#grouping the rows by date
group_by(date,country) %>%
#computing total confirmed, deaths and recovered cases count for the world
summarise(confirmed = sum(confirmed),
deaths = sum(deaths),
recovered = sum(recovered)) %>%
arrange(date)
## first 12 records
world_spread %>%
head(12) %>%
printTable(caption = "Table 6.1: First 12 countries exposed to ncov-19",col = 5)
View(world_notchina)
View(world_bydate)
world_bydate$active %>%
sum()
#Loading all required packages
library(tidyverse)
library(knitr)
library(kableExtra)
require(maps) # to create map
library(highcharter) #to create interactive map
library(janitor) #to clean
#read_csv reads the data as dataframe
raw_confirmed <- read_csv("data/time_series_19-covid-Confirmed.csv")
raw_deaths <- read_csv("data/time_series_19-covid-Deaths.csv")
raw_recovered <- read_csv("data/time_series_19-covid-Recovered.csv")
## creating a function for tidying data
tidyData <- function(data) {
## renaming columns for ease and cleaner code
data <- data %>%
rename(state = `Province/State`) %>%
rename(country = `Country/Region`)
## pivot_longer function from tidyr makes wide data to long format
data <- data %>%
pivot_longer(
cols = ends_with("/20"),
names_to = "date",
values_to = "count")
## convert from character to date
data$date <- as.Date(data$date,format = "%m/%d/%y")
# Now, there are lot of duplicate rows which have same country and date, so we can combine them
data <- data %>%
group_by(Lat,Long,state, country, date) %>%
summarise(count = sum(count)) %>%
as.data.frame()
return(data)
}
## clean the three datasets
confirmed <- tidyData(raw_confirmed) %>% rename(confirmed = count)
deaths <-  tidyData(raw_deaths) %>% rename(deaths = count)
recovered <-  tidyData(raw_recovered) %>% rename(recovered = count)
## merging the three datasets into one dataset for easier analysis based on state,country and date
corona <- confirmed %>%
merge(deaths, all = TRUE) %>%
merge(recovered, all = TRUE)
##This chunk contains the util functions created specific for this analysis
#Function 1
#creating a function to create type and count columns
#Using pivot_longer to make wide dataset long. confirmed, deaths and recovered become a new column named type
pivotData <- function(data){
data %>%
pivot_longer(
cols = c(confirmed,deaths,recovered),
names_to = "type",
values_to = "count")
}
#Function 2
#creating a function to mutateData to create active, recovery% and mortality% columns
# mutate from dplyr package creates new variables
mutateData <- function(data){
data <- data %>%
mutate(active = confirmed - recovered - deaths) %>%
mutate("recovery %" = round((recovered/confirmed)*100, digits = 3)) %>%
mutate("mortality %" = round((deaths/confirmed)*100, digits = 3))
}
#Function 3
#To print kable table with three paramters : data, caption of the table and number of columns to apply width
printTable <- function(data, caption, col = 7){
col <- col
data %>%
kable(format = "html", booktabs = T,caption = caption) %>%  #creates kable with html format
column_spec(column = 1:col, width = "1in") %>%
kable_styling() #kableExtra library has kable_styling to beautify the table
}
#Creating world dataset to compute cases worldwide
world <-  corona %>%
group_by(date) %>%     #grouping the rows by date
#computing total confirmed, deaths and recovered cases count for the world
summarise(confirmed = sum(confirmed),
deaths = sum(deaths),
recovered = sum(recovered))
#Plot of cases worldwide
world %>%
pivotData()%>% #function call to make the dataset long and create Type column
ggplot(mapping = aes(x = date, y = count/1000, color = type)) +
geom_point()+
geom_line() +
labs(title = "Trend of cases worldwide",
y = "Cases (1000s)")
#call the mutateData function on world dataset
world_bydate <- world %>%
mutateData()
## first 11 records
world_bydate %>% head(11) %>%
printTable("Table 1: Cases worldwide by date") #calling util function to print kable
#Creating world dataset to compute cases worldwide
world_bycountry <- corona %>%
filter(date == "2020-03-21") %>%     #filter by latest date
group_by(country) %>%      #grouping the rows by country
#computing total confirmed, deaths and recovered cases count
summarise(confirmed = sum(confirmed),
deaths = sum(deaths),
recovered = sum(recovered)) %>%
arrange(-confirmed) %>% #desc order of confirmed column
mutateData()   # creating new variables(active, recover%, mortality%) by calling mutateData function previously created
## first 12 records
world_bycountry %>%
head(12) %>%
printTable("Table 2: Cases worldwide by country") #calling the util function to print kable
#Creating world dataset to compute cases worldwide
world_notchina <- corona %>%
filter(country!="China") %>%
#grouping the rows by date
group_by(date) %>%
#computing total confirmed, deaths and recovered cases count
summarise(confirmed = sum(confirmed),
deaths = sum(deaths),
recovered = sum(recovered))
#Plot of cases worldwide except china
world_notchina %>%
pivotData() %>% #calling util func to create type and count columns
ggplot(mapping = aes(x = date, y = count/1000, color = type)) +
geom_point()+
geom_line() +
labs(title = "Trend of cases worldwide except China",
y = "Cases (1000s)")
# creating new variables(Active, recover%, mortality%) by calling mutateData util function previously created
world_notchina <- world_notchina %>%
mutateData()
## first 10 records
world_notchina %>% head(11) %>%
printTable("Table 3: Cases worldwide by date except China") #calling util function to print kable
us <- corona %>%
#filter country to US
filter(country == "US") %>%
#grouping the rows by date
group_by(date) %>%
#computing total confirmed, deaths and recovered cases count
summarise(confirmed = sum(confirmed),
deaths = sum(deaths),
recovered = sum(recovered))
us %>%
pivotData() %>% #function call to create type and count columns
#Plot of cases worldwide
ggplot(mapping = aes(x = date, y = count/1000, color = type)) +
geom_point()+
geom_line() +
labs(title = "Trend of cases in US",
y = "Cases (1000s)")
# creating new variables(Active, recover%, mortality%) by calling mutateData function previously created
us_bydate <- us %>%
mutateData()
## first 10 records
us_bydate %>% head(11) %>%
printTable("Table 4: Cases in the U.S. by date")
#Creating U.S dataset to compute cases statewise
us_bystate <- corona %>%
filter(country == "US") %>%          #filter country to US and latest date
filter(date == "2020-03-21") %>%
group_by(state) %>%                  #grouping the rows by state
#computing total confirmed, deaths and recovered cases count
summarise(confirmed = sum(confirmed),
deaths = sum(deaths),
recovered = sum(recovered)) %>%
arrange(-confirmed) %>%
mutateData() #calling mutate function
## first 10 records
us_bystate %>%
head(12) %>%
printTable("Table 5: Cases in the U.S by state")
world_bycountry %>%
head(10) %>%
ggplot(mapping = aes(x = confirmed, y = deaths, label = country)) +
geom_point(aes(color = country, size = country)) +
geom_text(aes(label=ifelse(deaths>500,as.character(country),'')),hjust=0,vjust=0) +
geom_smooth() +
labs(title = "Cases of COVID-19 in top 10 countries",
subtitle = "Confirmed vs Deaths",
caption = "Source:Corona dataset retrieved till March 21")
#creating a corona map
corona_map <- world_bycountry %>%
select(country, confirmed, deaths,recovered) %>%
rename(region = country)   # Rename columns
#merge map and corona data
world_map <- map_data("world") #creating a map of the world dataset
corona_map <- left_join(corona_map, world_map, by = "region") #Left joining the dataset based on region i.e. country
# ggplot plot of confirmed cases across the world
corona_map %>%
ggplot(aes(long, lat, group = group)) +
geom_polygon(aes(fill = confirmed), color = "white") +
labs(title = "Confirmed cases across the world",
caption = "Source: corona dataset retrieved till March 21")
data(worldgeojson, package = "highcharter")
world_bycountry$country[world_bycountry$country  == "US"] <- "United States of America"
world_bycountry %>%
janitor::clean_names() %>%
filter(confirmed > 0) -> countries
highchart() %>%
hc_add_series_map(worldgeojson, countries, value = 'active', joinBy = c('name','country'))  %>%
hc_colorAxis(minColor = "#FF0000", maxColor = "#8B0000") %>%
hc_title(text = "Countries exposed to nCov-19") %>%
hc_subtitle(text = 'Total Active Cases')
world_spread <- corona %>%
filter(confirmed!=0) %>%
#grouping the rows by date
group_by(date,country) %>%
#computing total confirmed, deaths and recovered cases count for the world
summarise(confirmed = sum(confirmed),
deaths = sum(deaths),
recovered = sum(recovered)) %>%
arrange(date)
## first 12 records
world_spread %>%
head(12) %>%
printTable(caption = "Table 6.1: First 12 countries exposed to ncov-19",col = 5)
data(worldgeojson, package = "highcharter")
world_bycountry$country[world_bycountry$country  == "US"] <- "United States of America"
world_bycountry %>%
janitor::clean_names() %>%
filter(confirmed > 0) -> countries
highchart() %>%
hc_add_series_map(worldgeojson, countries, value = 'active', joinBy = c('name','country'))  %>%
hc_colorAxis(minColor = "#FF0000", maxColor = "#000000") %>%
hc_title(text = "Countries exposed to nCov-19") %>%
hc_subtitle(text = 'Total Active Cases')
data(worldgeojson, package = "highcharter")
world_bycountry$country[world_bycountry$country  == "US"] <- "United States of America"
world_bycountry %>%
janitor::clean_names() %>%
filter(confirmed > 0) -> countries
highchart() %>%
hc_add_series_map(worldgeojson, countries, value = 'active', joinBy = c('name','country'))  %>%
hc_colorAxis(minColor = "#FA6039", maxColor = "#000000") %>%
hc_title(text = "Countries exposed to nCov-19") %>%
hc_subtitle(text = 'Total Active Cases')
View(us_bystate)
